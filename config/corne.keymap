/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define LALPHA 0
#define LNAV 1
#define LSYM 2
#define LM 3
#define LNUM 4

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <250>;
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_ret1 {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&kp ENTER>;
        };
	combo_ret2 {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp ENTER>;
        };
	combo_backspace {
            timeout-ms = <75>;
            key-positions = <15 16>;
            bindings = <&kp BACKSPACE>;
        };
	combo_space {
            timeout-ms = <75>;
            key-positions = <19 20>;
            bindings = <&kp SPACE>;
        };
	combo_q {
            timeout-ms = <50>;
            key-positions = <1 2>;
	    layers = <0>;
            bindings = <&kp Q>;
        };
	combo_x {
            timeout-ms = <50>;
            key-positions = <1 13>;
	    layers = <0>;
            bindings = <&kp X>;
        };
	combo_b {
            timeout-ms = <50>;
            key-positions = <2 14>;
	    layers = <0>;
            bindings = <&kp B>;
        };
	combo_y {
            timeout-ms = <50>;
            key-positions = <3 15>;
	    layers = <0>;
            bindings = <&kp Y>;
        };
	combo_k {
            timeout-ms = <50>;
            key-positions = <4 16>;
	    layers = <0>;
            bindings = <&kp K>;
        };
	combo_j {
            timeout-ms = <50>;
            key-positions = <9 10>;
	    layers = <0>;
            bindings = <&kp J>;
        };
	combo_f {
            timeout-ms = <50>;
            key-positions = <7 19>;
	    layers = <0>;
            bindings = <&kp F>;
        };
	combo_w {
            timeout-ms = <50>;
            key-positions = <8 20>;
	    layers = <0>;
            bindings = <&kp W>;
        };
	combo_v {
            timeout-ms = <50>;
            key-positions = <9 21>;
	    layers = <0>;
            bindings = <&kp V>;
        };
	combo_z {
            timeout-ms = <50>;
            key-positions = <10 22>;
	    layers = <0>;
            bindings = <&kp Z>;
        };
	combo_tab {
            timeout-ms = <50>;
            key-positions = <37 38>;
	    layers = <0>;
            bindings = <&kp TAB>;
        };
	combo_layer_media {
            timeout-ms = <50>;
            key-positions = <38 39>;
	    layers = <0>;
            bindings = <&mo LM>;
        };
	combo_layer {
            timeout-ms = <50>;
            key-positions = <39 40>;
	    layers = <0>;
            bindings = <&mo LNUM>;
        };
    };
    
    macros {
        pths: parentheses {
            label = "Double parentheses";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
	    wait-ms = <40>;
	    tap-ms = <40>;
            bindings
                = <&kp LPAR &kp RPAR>
                , <&kp LEFT>
                ;
        };
	braces: braces {
            label = "Double braces";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
	    wait-ms = <40>;
	    tap-ms = <40>;
            bindings
                = <&kp LBRC &kp RBRC>
                , <&kp LEFT>
                ;
        };
	bkts: brackets {
            label = "Double brackets";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
	    wait-ms = <40>;
	    tap-ms = <40>;
            bindings
                = <&kp LBKT &kp RBKT &kp LEFT>
                ;
        };
    };

        behaviors {
	ex_at: exclamation_shift_at {
            compatible = "zmk,behavior-mod-morph";
            label = "EXCLAMATION_SHIFT_AT";
            #binding-cells = <0>;
            bindings = <&kp EXCLAMATION>, <&kp AT>;
	    mods = <(MOD_LSFT)>;
        };
        perc_hash: percent_shift_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "PERCENT_SHIFT_HASH";
            #binding-cells = <0>;
            bindings = <&kp PERCENT>, <&kp HASH>;
	    mods = <(MOD_LSFT)>;
        };
	dol_hat: dollar_shift_hat {
            compatible = "zmk,behavior-mod-morph";
            label = "DOLLAR_SHIFT_HAT";
            #binding-cells = <0>;
            bindings = <&kp DOLLAR>, <&kp CARET>;
	    mods = <(MOD_LSFT)>;
        };
	stop_col: stop_shift_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "STOP_SHIFT_COLON";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp COLON>;
	    mods = <(MOD_LSFT)>;
        };
	comm_semi: comma_shift_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SHIFT_SEMICOLON";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
	    mods = <(MOD_LSFT)>;
        };
	apo_quote: apostrophe_shift_quotes {
            compatible = "zmk,behavior-mod-morph";
            label = "APOSTROPHE_SHIFT_QUOTES";
            #binding-cells = <0>;
            bindings = <&kp APOSTROPHE>, <&kp DOUBLE_QUOTES>;
	    mods = <(MOD_LSFT)>;
        };
	star_and: star_shift_ampersand {
            compatible = "zmk,behavior-mod-morph";
            label = "STAR_SHIFT_AMPERSAND";
            #binding-cells = <0>;
            bindings = <&kp ASTERISK>, <&kp AMPERSAND>;
	    mods = <(MOD_LSFT)>;
        };
	nf1: number_f1 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMBER_F1";
            #binding-cells = <0>;
            bindings = <&kp N1>, <&kp F1>;
	    mods = <(MOD_RSFT)>;
        };
	nf2: number_f2 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMBER_F2";
            #binding-cells = <0>;
            bindings = <&kp N2>, <&kp F2>;
	    mods = <(MOD_RSFT)>;
        };
	nf3: number_f3 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMBER_F3";
            #binding-cells = <0>;
            bindings = <&kp N3>, <&kp F3>;
	    mods = <(MOD_RSFT)>;
        };
	nf4: number_f4 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMBER_F4";
            #binding-cells = <0>;
            bindings = <&kp N4>, <&kp F4>;
	    mods = <(MOD_RSFT)>;
        };
	nf5: number_f5 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMBER_F5";
            #binding-cells = <0>;
            bindings = <&kp N5>, <&kp F5>;
	    mods = <(MOD_RSFT)>;
        };
	nf6: number_f6 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMBER_F6";
            #binding-cells = <0>;
            bindings = <&kp N6>, <&kp F6>;
	    mods = <(MOD_RSFT)>;
        };
	nf7: number_f7 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMBER_F7";
            #binding-cells = <0>;
            bindings = <&kp N7>, <&kp F7>;
	    mods = <(MOD_RSFT)>;
        };
	nf8: number_f8 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMBER_F8";
            #binding-cells = <0>;
            bindings = <&kp N8>, <&kp F8>;
	    mods = <(MOD_RSFT)>;
        };
	nf9: number_f9 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMBER_F9";
            #binding-cells = <0>;
            bindings = <&kp N9>, <&kp F9>;
	    mods = <(MOD_RSFT)>;
        };
    };

    keymap {
                compatible = "zmk,keymap";

                alpha_layer {
                bindings = <
   &none	&kp G		&kp P    	&kp L         	&kp C		&none	         	&none    	&kp D		&kp H         	&kp N		&kp M		&none
   &none	&kp O    	&kp A    	&kp E	 	&kp I		&none   	 	&none		&kp T		&kp R		&kp U		&kp S		&none
   &none	&none	 	&none 		&none 		&none	 	&none   	 	&none	 	&none  		&none		&none		&none		&none
                  				&none	 	&kp LGUI 	&mo LNAV		&kp LSHIFT	&mo LSYM 	&none
                	>;
                };

                nav_layer {
                bindings = <
   &none	&kp ESC		&kp LG(X)	&kp LG(V)    	&kp LG(C)	&none	         	&none    	&none		&kp UP         	&kp BSPC	&kp DEL		&none
   &none	&none    	&sk LSHIFT    	&sk RALT 	&sk RGUI	&none   	 	&none		&kp LEFT	&kp DOWN	&kp RIGHT	&kp LG(Z)	&none
   &none	&none	 	&none 		&none 		&none	 	&none   	 	&none	 	&none  		&none		&none		&none		&none
                  				&none	 	&sk RCTRL 	&trans			&kp TAB		&kp TILDE 	&none
                	>;
                };
                symbol_layer {
                bindings = <
   &none	&ex_at		&kp LT    	&kp GT      	&pths		&none	         	&none    	&braces		&bkts      	&kp SLASH	&kp BACKSLASH	&none
   &none	&perc_hash    	&dol_hat    	&star_and 	&stop_col	&none   	 	&none		&comm_semi	&apo_quote	&kp MINUS	&kp EQUAL	&none
   &none	&none	 	&none 		&none 		&none	 	&none   	 	&none	 	&none  		&none		&none		&none		&none
                  				&none	 	&none	 	&kp LSHIFT		&kp TILDE	&trans	 	&none
                	>;
                };
                media_layer {
                bindings = <
   &none	&none		&kp C_PREV    	&kp C_PP       	&kp C_NEXT	&none	         	&none    	&kp LG(LS(N4))	&kp F14        	&kp F15		&kp F16		&none
   &none	&none    	&kp C_VOL_DN   	&kp K_MUTE 	&kp C_VOL_UP	&none   	 	&none		&none		&none		&none		&none		&none
   &none	&none	 	&none 		&none 		&none	 	&none   	 	&none	 	&none  		&none		&none		&none		&none
                  				&none	 	&none	 	&trans			&trans		&none	 	&none
                	>;
                };
                number_layer {
                bindings = <
   &none	&nf1		&nf2	    	&nf3         	&nf4		&none	         	&none    	&kp F10		&kp F11        	&kp F12		&to LALPHA	&none
   &none	&nf5	    	&nf6	    	&nf7	 	&nf8		&none   	 	&none		&kp PERIOD	&kp RSHIFT	&to LNUM	&kp ENTER	&none
   &none	&none	 	&none 		&none 		&none	 	&none   	 	&none	 	&none  		&none		&none		&none		&none
                  				&none	 	&nf9	 	&kp N0			&trans		&trans	 	&none
                	>;
                };
        };
};
